#include "utils/chain.h"
#include "misc/misc.h"
#include "scheme/public_misc.h"
#include "log/tick.h"

namespace scheme::ot_complaint {

template <typename AliceData>
Alice<AliceData>::Alice(std::shared_ptr<AliceData> a, h256_t const& self_id,
                        h256_t const& peer_id)
    : a_(a),
      self_id_(self_id),
      peer_id_(peer_id),
      n_(a_->bulletin().n),
      s_(a_->bulletin().s) {
  seed0_ = misc::RandH256();
  ot_self_pk_ = G2Rand();
  ot_alpha_ = FrRand();
  alice_nonce_ = misc::RandH256();
}

template <typename AliceData>
void Alice<AliceData>::BuildMapping() {
  Tick _tick_(__FUNCTION__);
  mappings_.resize(phantoms_count_);
  size_t index = 0;
  for (auto const& p : phantoms_) {
    for (size_t i = p.start; i < (p.start + p.count); ++i) {
      mappings_[index++].global_index = i;
    }
  }
}

template <typename AliceData>
void Alice<AliceData>::GetNegoReqeust(NegoARequest& request) {
  request.s = ot_self_pk_;
}

template <typename AliceData>
bool Alice<AliceData>::OnNegoRequest(NegoBRequest const& request,
                                     NegoBResponse& response) {
  ot_peer_pk_ = request.t;
  response.t_exp_alpha = ot_peer_pk_ * ot_alpha_;
  return true;
}

template <typename AliceData>
bool Alice<AliceData>::OnNegoResponse(NegoAResponse const& response) {
  ot_sk_ = response.s_exp_beta * ot_alpha_;
  return true;
}

template <typename AliceData>
bool Alice<AliceData>::OnRequest(Request request, Response& response) {
  Tick _tick_(__FUNCTION__);

  phantoms_ = std::move(request.phantoms);       // sizeof() = L
  ot_vi_ = std::move(request.ot_vi);  // sizeof() = K
  ot_v_ = std::move(request.ot_v);
  bob_nonce_ = request.bob_nonce;
  response.alice_nonce = alice_nonce_;

  if (!CheckPhantoms(n_, phantoms_)) {
    assert(false);
    return false;
  }

  phantoms_count_ =
      std::accumulate(phantoms_.begin(), phantoms_.end(), 0ULL,
                      [](uint64_t t, Range const& i) { return t + i.count; });

  if (ot_vi_.size() >= phantoms_count_) {
    assert(false);
    return false;
  }

  BuildMapping();

  ChainKeccak256(seed0_, (phantoms_count_ + 1) * s_, v_);

  if (evil_) {
    // NOTE: use rand() for test
    uint64_t evil_i = rand() % phantoms_count_;
    uint64_t evil_j = s_ - 1;  // last col
    v_[evil_i * s_ + evil_j] = FrRand();
    std::cout << "evil: " << evil_i << "," << evil_j << "\n";
  }

  BuildK(v_, response.k, s_);

  k_mkl_root_ = CalcRootOfK(response.k);

  ot_rand_c_ = FrRand();
  response.ot_ui.resize(ot_vi_.size());

  auto parallel_f = [this, &response](int64_t j) mutable {
    response.ot_ui[j] = ot_vi_[j] * ot_rand_c_;
  };
  parallel::For((int64_t)response.ot_ui.size(), parallel_f);

  std::vector<h256_t> seed2_h{{peer_id_, self_id_, alice_nonce_, bob_nonce_,
                               CalcRangesDigest(phantoms_),
                               CalcG1DataDigest(ot_vi_), G1ToBin(ot_v_),
                               CalcG1DataDigest(response.ot_ui), k_mkl_root_}};
  seed2_ = CalcSeed2(seed2_h);  

  ChainKeccak256(seed2_, phantoms_count_, w_);
  w_.push_back(FrOne());

  // compute mij' = vij + wi * mij
  auto const& m = a_->m();
  response.m.resize(phantoms_count_ * s_);

  auto parallel_f2 = [this, &response, &m](int64_t i) mutable {
    auto const& map = mappings_[i];
    auto fr_i = MapToFr(map.global_index);
    Fp12 e;
    G1 v_exp_fr_c = ot_v_ * (fr_i * ot_rand_c_);
    mcl::bn256::pairing(e, v_exp_fr_c, ot_sk_);
    uint8_t buf[32 * 12];
    auto ret_len = e.serialize(buf, sizeof(buf));
    if (ret_len != sizeof(buf)) {
      assert(false);
      throw std::runtime_error("oops");
    }
    Fr fr_e = MapToFr(buf, sizeof(buf));

    auto is = i * s_;
    auto m_is = map.global_index * s_;
    for (uint64_t j = 0; j < s_; ++j) {
      auto ij = is + j;
      auto m_ij = m_is + j;
      response.m[ij] = v_[ij] + w_[i] * m[m_ij];
      response.m[ij] += fr_e;
    }
  };
  parallel::For((int64_t)mappings_.size(), parallel_f2);

  return true;
}

template <typename AliceData>
bool Alice<AliceData>::OnReceipt(Receipt const& receipt, Secret& secret) {
  if (receipt.seed2 != seed2_) {
    assert(false);
    return false;
  }
  if (receipt.k_mkl_root != k_mkl_root_) {
    assert(false);
    return false;
  }
  if (receipt.count != phantoms_count_) {
    assert(false);
    return false;
  }
  secret.seed0 = seed0_;
  return true;
}

}  // namespace scheme::ot_complaint
